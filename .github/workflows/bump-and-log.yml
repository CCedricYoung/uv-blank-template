name: Bump and Log

on:
  pull_request:
    types: [closed]

permissions:
  contents: write

jobs:
  on-merge:
    if: ${{ github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.base.ref }}
          persist-credentials: true
      - name: Install the latest version of uv
        uses: astral-sh/setup-uv@d0cc045d04ccac9d8b7881df0226f9e82c39688e # v6
        with:
          version: "latest"
      - name: Sync Python 3.14 runtime
        run: |
          uv sync -p 3.14
      - name: Configure git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
      - name: Extract commit, compute tag and prepend changelog
        env:
          MERGE_SHA: ${{ github.event.pull_request.merge_commit_sha }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          BASE_REF: ${{ github.event.pull_request.base.ref }}
        id: compute-tag
        run: |
          set -euo pipefail
          # Extract title/body from merge commit
          TITLE=$(git show -s --format=%s "$MERGE_SHA")
          BODY=$(git show -s --format=%b "$MERGE_SHA")

          # Bump patch version using uv (this will update pyproject.toml)
          uv version --bump patch
          TAG=$(sed -n "s/^version *= *\"\(.*\)\"/\1/p" pyproject.toml)

          # Emit the tag as a step output for downstream steps
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"

          # Prepend changelog entry
          [ -f CHANGELOG.md ] || printf '# Changelog\n\n' > CHANGELOG.md
          DATE=$(date +%F)
          TMP="$(mktemp)"
          {
            # Header: version, title and ISO date
            printf '# %s %s (%s)\n' "$TAG" "$TITLE" "$DATE"
            # Body (if present) and a separating blank line
            if [ -n "$BODY" ]; then
              printf '%s\n' "$BODY"
            fi
            printf '\n'
            # Append existing changelog content
            cat CHANGELOG.md
          } > "$TMP"
          mv "$TMP" CHANGELOG.md
          # Add pyproject if uv bumped the version, and the changelog
          git add pyproject.toml CHANGELOG.md || true
          if ! git diff --cached --quiet; then
            git commit -m "chore(changelog): add entry for PR #${PR_NUMBER} - ${TITLE}"
            git push origin HEAD:"${BASE_REF}"
          fi

      - name: Create and push tag
        if: ${{ steps.compute-tag.outputs.tag != '' }}
        env:
          TAG: ${{ steps.compute-tag.outputs.tag }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          set -euo pipefail
          # Don't fail if tag already exists
          if git rev-parse "refs/tags/$TAG" >/dev/null 2>&1; then
            echo "Tag $TAG already exists, skipping tag creation."
            exit 0
          fi
          # Create annotated tag with changelog header as message (first line)
          MESSAGE="chore(release): $TAG (PR #${PR_NUMBER})"
          git tag -a "$TAG" -m "$MESSAGE"
          git push origin "refs/tags/$TAG"
