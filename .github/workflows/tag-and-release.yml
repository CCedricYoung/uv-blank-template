name: Tag and Release
# The following job is run when a commit changes pyproject.toml file:
#   * Checks if the version of the project is the same of the latest release
#   * If not, creates a new GitHub release

on:
  workflow_dispatch:
  repository_dispatch:
    types: [trigger_tag_and_release]

jobs:

  gh-release:
    runs-on: "ubuntu-latest"
    outputs:
      version: ${{ steps.project_version.outputs.version }}
    steps:
      - id: check_out
        name: Check out code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
      - id: project_version
        name: Get version from pyproject.toml
        run: |
          version=$(sed -n "s/^version *= *\"\(.*\)\"/\1/p" pyproject.toml)
          echo "version=$version" >> $GITHUB_OUTPUT
      - id: latest_release
        name: Get latest release version
        run: |
          latest_release=$(gh api /repos/${GITHUB_REPOSITORY}/releases/latest --jq '.tag_name')
          echo "latest_release=$latest_release" >> $GITHUB_ENV
      - id: gh_tag_and_release_if_needed
        name: Get version from pyproject.toml
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          version="${{ steps.project_version.outputs.version }}"
          latest_release="${{ env.latest_release }}"
          if [[ $version != $latest_release ]]; then
            gh api \
              --method POST \
              -H "Accept: application/vnd.github+json" \
              /repos/${GITHUB_REPOSITORY}/releases \
              -f tag_name=$version \
              -f name="v$version" \
              -F draft=false \
              -F prerelease=false \
              -F generate_release_notes=true
          else:
            echo "No new release needed. Current version ($version) matches latest release ($latest_release)."
          fi

  test-pypi-release:
    needs: gh-release
    environment: uv-blank-template-publish-test # match name in test.PyPI.org OIDC
    runs-on: ubuntu-latest
    permissions:
      id-token: write # Required for connection to pypi OIDC
      contents: read # For non-public repo
    steps:
      - name: checkout main
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          ref: main
          fetch-depth: 0
      - name: Install the latest version of uv
        uses: astral-sh/setup-uv@d0cc045d04ccac9d8b7881df0226f9e82c39688e # v6
        with:
          version: "latest"
      - name: Install with Python 3.14
        run: |
          uv sync -p 3.14
      - name: build package
        run: |
          uv build
      - name: publish to test.pypi.org
        uses: pypa/gh-action-pypi-publish@ed0c53931b1dc9bd32cbe73a98c7f6766f8a527e # v1.13.0
        with:
          repository-url: https://test.pypi.org/legacy/

  production-pypi-release:
    needs: test-pypi-release
    environment: uv-blank-template-publish-production # match name in www.PyPI.org OIDC
    runs-on: ubuntu-latest
    permissions:
      id-token: write # Required for connection to pypi OIDC
      contents: read # For non-public repo
    steps:
      - name: checkout main
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          ref: main
          fetch-depth: 0
      - name: Install the latest version of uv
        uses: astral-sh/setup-uv@d0cc045d04ccac9d8b7881df0226f9e82c39688e # v6
        with:
          enable-cache: true
      - name: Install with Python 3.14
        run: |
          uv sync -p 3.14
      - name: build package
        run: |
          uv build
      - name: publish to pypi.org
        uses: pypa/gh-action-pypi-publish@ed0c53931b1dc9bd32cbe73a98c7f6766f8a527e # v1.13.0
