name: Tag and Release
# The following job is run when a commit changes pyproject.toml file:
#   * Checks if the version of the project is the same of the latest release
#   * If not, creates a new GitHub release

on:
  workflow_dispatch:
  repository_dispatch:
    types: ["Tag and Release (bot)"]

jobs:
  gh-release:
    runs-on: "ubuntu-latest"
    permissions:
      contents: write
    outputs:
      version: ${{ steps.package_info.outputs.version }}
      package_name: ${{ steps.package_info.outputs.package_name }}
    steps:
      - id: check_out
        name: Check out code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
      - name: Install the latest version of uv
        uses: astral-sh/setup-uv@d0cc045d04ccac9d8b7881df0226f9e82c39688e # v6
        with:
          version: "latest"
      - name: Sync Python 3.14 runtime
        run: |
          uv sync
      - id: package_info
        name: Get packge name and version from pyproject.toml
        run: |
          set -exuo pipefail
          source .venv/bin/activate

          version=$(python -c "import tomllib, pathlib; print(tomllib.loads(pathlib.Path('pyproject.toml').read_text())['project']['version'])")
          echo "version=$version" >> $GITHUB_OUTPUT

          package_name=$(python -c "import tomllib, pathlib; print(tomllib.loads(pathlib.Path('pyproject.toml').read_text())['project']['name'])")
          echo "package_name=$package_name" >> $GITHUB_OUTPUT
      - id: latest_release
        name: Get latest gh release version
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          set -exuo pipefail
          latest_release=$(gh api /repos/${GITHUB_REPOSITORY}/releases/latest --jq '.tag_name')
          echo "latest_release=$latest_release" >> $GITHUB_ENV
      - id: check_gh_release
        name: Check if GitHub release exists for current version
        run: |
          set -exuo pipefail

          version="${{ steps.package_info.outputs.version }}"
          latest_release="${{ env.latest_release }}"
          if [[ $version == $latest_release ]]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
      - id: gh_tag_and_release_if_needed
        if: steps.check_gh_release.outputs.exists == 'false'
        name: Get version from pyproject.toml
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          set -exuo pipefail

          version="${{ steps.package_info.outputs.version }}"
          gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            /repos/${GITHUB_REPOSITORY}/releases \
            -f tag_name=$version \
            -f name="v$version" \
            -F draft=false \
            -F prerelease=false \
            -F generate_release_notes=true

  test-pypi-release:
    needs: gh-release
    environment: uv-blank-template-publish-test # match name in test.PyPI.org OIDC
    runs-on: ubuntu-latest
    permissions:
      id-token: write # Required for connection to pypi OIDC
      contents: read # For non-public repo
    steps:
      - name: checkout main
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          ref: main
          fetch-depth: 0
      - name: Install the latest version of uv
        uses: astral-sh/setup-uv@d0cc045d04ccac9d8b7881df0226f9e82c39688e # v6
        with:
          version: "latest"
      - name: Install with Python 3.14
        run: |
          uv sync
      - name: build package
        run: |
          uv build
      - name: Check TestPyPI for existing version
        id: check_testpypi
        run: |
          set -exuo pipefail
          version="${{ needs.gh-release.outputs.version }}"
          package_name="${{ needs.gh-release.outputs.package_name }}"

          echo "Checking TestPyPI for $package_name==$version"
          # Use the per-version JSON endpoint which returns 200 when the release exists
          url="https://test.pypi.org/pypi/${package_name}/${version}/json"
          if curl -sSfI "$url" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
      - name: publish to test.pypi.org
        if: steps.check_testpypi.outputs.exists == 'false'
        uses: pypa/gh-action-pypi-publish@ed0c53931b1dc9bd32cbe73a98c7f6766f8a527e # v1.13.0
        with:
          repository-url: https://test.pypi.org/legacy/

  production-pypi-release:
    needs: [gh-release, test-pypi-release]
    environment: uv-blank-template-publish-production # match name in www.PyPI.org OIDC
    runs-on: ubuntu-latest
    permissions:
      id-token: write # Required for connection to pypi OIDC
      contents: read # For non-public repo
    steps:
      - name: checkout main
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          ref: main
          fetch-depth: 0
      - name: Install the latest version of uv
        uses: astral-sh/setup-uv@d0cc045d04ccac9d8b7881df0226f9e82c39688e # v6
        with:
          enable-cache: true
      - name: Install with Python 3.14
        run: |
          uv sync
      - name: build package
        run: |
          uv build
      - name: Check PyPI for existing version
        id: check_pypi
        run: |
          set -exuo pipefail
          version="${{ needs.gh-release.outputs.version }}"
          package_name="${{ needs.gh-release.outputs.package_name }}"

          echo "Checking PyPI for $package_name==$version"
          url="https://pypi.org/pypi/${package_name}/${version}/json"
          if curl -sSfI "$url" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
      - name: publish to pypi.org
        if: steps.check_pypi.outputs.exists == 'false'
        uses: pypa/gh-action-pypi-publish@ed0c53931b1dc9bd32cbe73a98c7f6766f8a527e # v1.13.0
